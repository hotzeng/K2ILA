// Autogenerated using stratification.
requires "x86-configuration.k"

module VPSUBUSW-XMM-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(vpsubusw:Opcode HOLE:Mem, R2:Xmm, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpsubusw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vpsubusw memOffset( MemOff), R2:Xmm, R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vpsubusw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 0, 16))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 0, 16))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 0, 16))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 16, 32))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 16, 32))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 16, 32))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 32, 48))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 32, 48))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 32, 48))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 48, 64))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 48, 64))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 48, 64))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 64, 80))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 64, 80))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 64, 80))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 80, 96))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 80, 96))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 80, 96))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 96, 112))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 96, 112))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 96, 112))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 112, 128))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 112, 128))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 112, 128))), 2, 18) #fi) #fi)))))))))
      )
    </regstate>
endmodule
