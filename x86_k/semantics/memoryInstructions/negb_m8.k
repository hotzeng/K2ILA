// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGB-M8
  imports X86-CONFIGURATION

  context execinstr(negb:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (negb:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 8) ~>
      execinstr (negb memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem8:MInt):MemLoadValue ~> execinstr (negb:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              addMInt(mi(8, 1), negMInt( Mem8)),
              MemOff,
              8
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( Mem8, mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( Mem8, 3, 4), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 3, 4), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(8, 1), negMInt( Mem8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( Mem8, 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( Mem8)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
