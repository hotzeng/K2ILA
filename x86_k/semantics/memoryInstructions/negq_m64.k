// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGQ-M64
  imports X86-CONFIGURATION

  context execinstr(negq:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (negq:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (negq memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (negq:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              addMInt(mi(64, 1), negMInt( Mem64)),
              MemOff,
              64
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( Mem64, mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( Mem64, 59, 60), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 59, 60), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(64, 1), negMInt( Mem64)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( Mem64, 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( Mem64)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
