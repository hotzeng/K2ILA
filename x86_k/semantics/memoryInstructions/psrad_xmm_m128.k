// Autogenerated using stratification.
requires "x86-configuration.k"

module PSRAD-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(psrad:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (psrad:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (psrad memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (psrad:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( Mem128, 64, 128), mi(64, 31)) #then mi(32, 32) #else extractMInt( Mem128, 96, 128) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( Mem128, 64, 128), mi(64, 31)) #then mi(32, 32) #else extractMInt( Mem128, 96, 128) #fi))), concatenateMInt( aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( Mem128, 64, 128), mi(64, 31)) #then mi(32, 32) #else extractMInt( Mem128, 96, 128) #fi))), aShiftRightMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( Mem128, 64, 128), mi(64, 31)) #then mi(32, 32) #else extractMInt( Mem128, 96, 128) #fi)))))))
      )
    </regstate>
endmodule
