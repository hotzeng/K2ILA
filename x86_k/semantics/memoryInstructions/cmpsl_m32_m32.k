// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPSL
  imports X86-CONFIGURATION

   rule <k>
    execinstr (cmpsl M1:Mem, M2:Mem, .Operands) =>
      loadFromMemory( getRegisterValue(%rdi, RSMap), 32) ~>
      execinstr (cmpsl   .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>

  rule <k>
    memLoadValue(Mem32_1:MInt):MemLoadValue ~> execinstr (cmpsl  .Operands) => 
        loadFromMemory( getRegisterValue(%rsi, RSMap), 32) ~> execinstr (cmpsl Mem32_1,  .Operands)                    
  ...</k>
    <regstate> RSMap:Map </regstate>

  

  rule <k>
    memLoadValue(Mem32_2:MInt):MemLoadValue ~> execinstr (cmpsl Mem32_1:MInt, .Operands) => .
  ...</k>
  <regstate>
RSMap:Map => updateMap(RSMap,
  convToRegKeys(%rdi) |-> addMInt(getRegisterValue(%rdi, RSMap), mi( 64, 4))
  convToRegKeys(%rsi) |-> addMInt(getRegisterValue(%rsi, RSMap), mi( 64, 4))

  "CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
  "AF" |-> xorMInt( xorMInt( extractMInt(Mem32_2, 27, 28), extractMInt(Mem32_1, 27, 28)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 28, 29))
  "OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt(Mem32_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt(Mem32_1, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt(Mem32_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

  "ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
  "SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 1, 2)
  "PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
)
    </regstate>
    requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 0))

  rule <k>
    memLoadValue(Mem32_2:MInt):MemLoadValue ~> execinstr (cmpsl Mem32_1:MInt, .Operands) => .
  ...</k>
  <regstate>
RSMap:Map => updateMap(RSMap,
  convToRegKeys(%rdi) |-> subMInt(getRegisterValue(%rdi, RSMap), mi( 64, 4))
  convToRegKeys(%rsi) |-> subMInt(getRegisterValue(%rsi, RSMap), mi( 64, 4))

  "CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
  "AF" |-> xorMInt( xorMInt( extractMInt(Mem32_2, 27, 28), extractMInt(Mem32_1, 27, 28)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 28, 29))
  "OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt(Mem32_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt(Mem32_1, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt(Mem32_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

  "ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
  "SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 1, 2)
  "PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem32_2)), mi(33, 1)), concatenateMInt( mi(1, 0), Mem32_1)), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
)
    </regstate>
    requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 1))
endmodule
