// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSW
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsw  M1:Mem, M2:Mem,   .Operands) =>
      loadFromMemory( getRegisterValue(%rsi, RSMap), 16) ~> execinstr (movsw  .Operands)
    ...</k>
    <regstate> RSMap:Map </regstate>

  
  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (movsw  .Operands) => 
      storeToMemory(Mem16, getRegisterValue(%rdi, RSMap), 16) ~>
      setRegisterValue(addMInt(getRegisterValue(%rdi, RSMap), mi( 64, 2)), %rdi) ~>
      setRegisterValue(addMInt(getRegisterValue(%rsi, RSMap), mi( 64, 2)), %rsi)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 0))

  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (movsw  .Operands) => 
      storeToMemory(Mem16, getRegisterValue(%rdi, RSMap), 16) ~>
      setRegisterValue(subMInt(getRegisterValue(%rdi, RSMap), mi( 64, 2)), %rdi) ~>
      setRegisterValue(subMInt(getRegisterValue(%rsi, RSMap), mi( 64, 2)), %rsi)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 1))

  endmodule
