// Autogenerated using stratification.
requires "x86-configuration.k"

module SHRL-M32-ONE
  imports X86-CONFIGURATION
  rule <k>
    execinstr (shrl  M:Mem,  .Operands) =>  execinstr (shrl $0x1, M,  .Operands)
  ...</k>

  context execinstr(shrl:Opcode $0x1, HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (shrl:Opcode $0x1, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (shrl $0x1, memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (shrl:Opcode $0x1, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32),
              MemOff,
              32
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 32, 33)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( lshrMInt( concatenateMInt( Mem32, mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 1)

"OF" |-> extractMInt( Mem32, 0, 1)
      )
    </regstate>
endmodule
