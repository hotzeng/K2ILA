// Autogenerated using stratification.
requires "x86-configuration.k"

module XORW-M16-IMM16
  imports X86-CONFIGURATION

  context execinstr(xorw:Opcode Imm16:Imm, HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (xorw:Opcode Imm16:Imm, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 16) ~>
      execinstr (xorw Imm16, memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (xorw:Opcode Imm16:Imm, memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              xorMInt( Mem16, handleImmediateWithSignExtend(Imm16, 16, 16)),
              MemOff,
              16
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( Mem16, 15, 16), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( Mem16, 14, 15), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( Mem16, 13, 14), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( Mem16, 12, 13), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( Mem16, 11, 12), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( Mem16, 10, 11), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( Mem16, 9, 10), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( Mem16, 8, 9), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( Mem16, handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( Mem16, 0, 1), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
