// Autogenerated using stratification.
requires "x86-configuration.k"

module VUCOMISD-XMM-M64
  imports X86-CONFIGURATION

  context execinstr(vucomisd:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vucomisd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (vucomisd memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (vucomisd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), Mem64), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), Mem64), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), Mem64), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), Mem64), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), Mem64), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
