// Autogenerated using stratification.
requires "x86-configuration.k"

module POPCNTQ-R64-M64
  imports X86-CONFIGURATION

  context execinstr(popcntq:Opcode HOLE:Mem, R2:R64,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (popcntq:Opcode memOffset( MemOff:MInt):MemOffset, R2:R64,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (popcntq memOffset( MemOff), R2,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (popcntq:Opcode memOffset( MemOff:MInt):MemOffset, R2:R64,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> addMInt( concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 0, 1)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 1, 2)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 2, 3)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 3, 4)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 4, 5)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 5, 6)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 6, 7)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 7, 8)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 8, 9)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 9, 10)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 10, 11)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 11, 12)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 12, 13)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 13, 14)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 14, 15)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 15, 16)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 16, 17)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 17, 18)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 18, 19)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 19, 20)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 20, 21)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 21, 22)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 22, 23)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 23, 24)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 24, 25)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 25, 26)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 26, 27)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 27, 28)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 28, 29)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 29, 30)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 30, 31)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 31, 32)))))))))))), concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 32, 33)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 33, 34)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 34, 35)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 35, 36)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 36, 37)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 37, 38)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 38, 39)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 39, 40)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 40, 41)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 41, 42)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 42, 43)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 43, 44)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 44, 45)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 45, 46)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 46, 47)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 47, 48)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 48, 49)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 49, 50)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 50, 51)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 51, 52)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 52, 53)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 53, 54)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 54, 55)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 55, 56)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 56, 57)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 57, 58)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 58, 59)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 59, 60)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 60, 61)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 61, 62)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem64, 62, 63)), concatenateMInt( mi(1, 0), extractMInt( Mem64, 63, 64)))))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( Mem64, mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
