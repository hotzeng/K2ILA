// Autogenerated using stratification.
requires "x86-configuration.k"

module POPCNTW-R16-M16
  imports X86-CONFIGURATION

  context execinstr(popcntw:Opcode HOLE:Mem, R2:R16,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (popcntw:Opcode memOffset( MemOff:MInt):MemOffset, R2:R16,  .Operands) =>
      loadFromMemory( MemOff, 16) ~>
      execinstr (popcntw memOffset( MemOff), R2,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (popcntw:Opcode memOffset( MemOff:MInt):MemOffset, R2:R16,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 0, 1)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 1, 2)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 2, 3)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 3, 4)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 4, 5)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 5, 6)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 6, 7)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 7, 8)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 8, 9)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 9, 10)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 10, 11)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 11, 12)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 12, 13)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 13, 14)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem16, 14, 15)), concatenateMInt( mi(1, 0), extractMInt( Mem16, 15, 16))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( Mem16, mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
