// Autogenerated using stratification.
requires "x86-configuration.k"

module MULXQ-R64-R64-M64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (mulx:Opcode M:Mem, R2:R64, R3:R64,  .Operands) => execinstr (mulxq:Opcode M:Mem, R2:R64, R3:R64,  .Operands) 
  ...</k>
  context execinstr(mulxq:Opcode HOLE:Mem, R2:R64, R3:R64,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (mulxq:Opcode memOffset( MemOff:MInt):MemOffset, R2:R64, R3:R64,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (mulxq memOffset( MemOff), R2, R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (mulxq:Opcode memOffset( MemOff:MInt):MemOffset, R2:R64, R3:R64,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), MemOff), concatenateMInt( mi(64, 0), Mem64)), 64, 128)

convToRegKeys(R3) |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), MemOff), concatenateMInt( mi(64, 0), Mem64)), 0, 64)
      )
    </regstate>
endmodule
