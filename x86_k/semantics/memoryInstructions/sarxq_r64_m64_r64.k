// Autogenerated using stratification.
requires "x86-configuration.k"

module SARXQ-R64-M64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarx:Opcode R1:R64, M:Mem, R3:R64,  .Operands) => execinstr (sarxq:Opcode R1:R64, M, R3:R64,  .Operands)
  ...</k>


  context execinstr(sarxq:Opcode R1:R64, HOLE:Mem, R3:R64,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (sarxq:Opcode R1:R64, memOffset( MemOff:MInt):MemOffset, R3:R64,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (sarxq R1, memOffset( MemOff), R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (sarxq:Opcode R1:R64, memOffset( MemOff:MInt):MemOffset, R3:R64,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> aShiftRightMInt( Mem64, uvalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63))))
      )
    </regstate>
endmodule
