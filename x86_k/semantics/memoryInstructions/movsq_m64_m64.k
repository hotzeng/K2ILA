// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSQ
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsq  M1:Mem, M2:Mem,  .Operands) =>
      loadFromMemory( getRegisterValue(%rsi, RSMap), 64) ~> execinstr (movsq  .Operands)
    ...</k>
    <regstate> RSMap:Map </regstate>

  
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (movsq  .Operands) => 
      storeToMemory(Mem64, getRegisterValue(%rdi, RSMap), 64) ~>
      setRegisterValue(addMInt(getRegisterValue(%rdi, RSMap), mi( 64, 8)), %rdi) ~>
      setRegisterValue(addMInt(getRegisterValue(%rsi, RSMap), mi( 64, 8)), %rsi)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 0))

  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (movsq  .Operands) => 
      storeToMemory(Mem64, getRegisterValue(%rdi, RSMap), 64) ~>
      setRegisterValue(subMInt(getRegisterValue(%rdi, RSMap), mi( 64, 8)), %rdi) ~>
      setRegisterValue(subMInt(getRegisterValue(%rsi, RSMap), mi( 64, 8)), %rsi)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 1))

  endmodule
