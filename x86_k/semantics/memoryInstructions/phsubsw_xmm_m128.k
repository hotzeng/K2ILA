// Autogenerated using stratification.
requires "x86-configuration.k"

module PHSUBSW-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(phsubsw:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (phsubsw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (phsubsw memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (phsubsw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 16, 32))), mi(32, svalueMInt(extractMInt( Mem128, 0, 16)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 16, 32))), mi(32, svalueMInt(extractMInt( Mem128, 0, 16)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 16, 32))), mi(32, svalueMInt(extractMInt( Mem128, 0, 16)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 48, 64))), mi(32, svalueMInt(extractMInt( Mem128, 32, 48)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 48, 64))), mi(32, svalueMInt(extractMInt( Mem128, 32, 48)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 48, 64))), mi(32, svalueMInt(extractMInt( Mem128, 32, 48)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 80, 96))), mi(32, svalueMInt(extractMInt( Mem128, 64, 80)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 80, 96))), mi(32, svalueMInt(extractMInt( Mem128, 64, 80)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 80, 96))), mi(32, svalueMInt(extractMInt( Mem128, 64, 80)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 112, 128))), mi(32, svalueMInt(extractMInt( Mem128, 96, 112)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 112, 128))), mi(32, svalueMInt(extractMInt( Mem128, 96, 112)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( Mem128, 112, 128))), mi(32, svalueMInt(extractMInt( Mem128, 96, 112)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi)))))))))
      )
    </regstate>
endmodule
