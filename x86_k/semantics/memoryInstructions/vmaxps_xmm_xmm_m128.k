// Autogenerated using stratification.
requires "x86-configuration.k"

module VMAXPS-XMM-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(vmaxps:Opcode HOLE:Mem, R2:Xmm, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vmaxps:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vmaxps memOffset( MemOff), R2:Xmm, R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vmaxps:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( Mem128, 0, 32)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( Mem128, 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( Mem128, 32, 64)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( Mem128, 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( Mem128, 64, 96)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( Mem128, 64, 96) #fi), (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( Mem128, 96, 128)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( Mem128, 96, 128) #fi)))))
      )
    </regstate>
endmodule
