// Autogenerated using stratification.
requires "x86-configuration.k"

module XORB-R8-M8
  imports X86-CONFIGURATION

  context execinstr(xorb:Opcode HOLE:Mem, R2:R8,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (xorb:Opcode memOffset( MemOff:MInt):MemOffset, R2:R8,  .Operands) =>
      loadFromMemory( MemOff, 8) ~>
      execinstr (xorb memOffset( MemOff), R2,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem8:MInt):MemLoadValue ~> execinstr (xorb:Opcode memOffset( MemOff:MInt):MemOffset, R2:R8,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), Mem8))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( Mem8, 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( Mem8, 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( Mem8, 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( Mem8, 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( Mem8, 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( Mem8, 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( Mem8, 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( Mem8, 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), Mem8), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( Mem8, 0, 1))

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
