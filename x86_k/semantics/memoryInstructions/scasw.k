// Autogenerated using stratification.
requires "x86-configuration.k"

module SCASW
  imports X86-CONFIGURATION

  rule <k>
    execinstr (scasw  .Operands) =>
      loadFromMemory( getRegisterValue(%rdi, RSMap), 16) ~>
      execinstr (scasw getRegisterValue(%ax, RSMap),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>

  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (scasw V:MInt, .Operands) => .
  ...</k>
  <regstate>
RSMap:Map => updateMap(RSMap,
  convToRegKeys(%rdi) |-> addMInt(getRegisterValue(%rdi, RSMap), mi( 64, 2))

  "CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
  "AF" |-> xorMInt( xorMInt( extractMInt(Mem16, 11, 12), extractMInt(V, 11, 12)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 12, 13))
  "OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt(Mem16, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt(V , 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt(Mem16, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

  "ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
  "SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 1, 2)
  "PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
)
    </regstate>
    requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 0))

 rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (scasw V:MInt, .Operands) => .
  ...</k>
  <regstate>
RSMap:Map => updateMap(RSMap,
  convToRegKeys(%rdi) |-> subMInt(getRegisterValue(%rdi, RSMap), mi( 64, 2))

  "CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
  "AF" |-> xorMInt( xorMInt( extractMInt(Mem16, 11, 12), extractMInt(V, 11, 12)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 12, 13))
  "OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt(Mem16, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt(V , 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt(Mem16, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

  "ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
  "SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 1, 2)
  "PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem16)), mi(17, 1)), concatenateMInt( mi(1, 0), V)), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)
)
    </regstate>
    requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 1))
endmodule
