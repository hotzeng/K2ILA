// Autogenerated using stratification.
requires "x86-configuration.k"

module VTESTPD-YMM-M256
  imports X86-CONFIGURATION

  context execinstr(vtestpd:Opcode HOLE:Mem, R2:Ymm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vtestpd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm,  .Operands) =>
      loadFromMemory( MemOff, 256) ~>
      execinstr (vtestpd memOffset( MemOff), R2:Ymm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem256:MInt):MemLoadValue ~> execinstr (vtestpd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (((eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 192, 193)), extractMInt( Mem256, 192, 193)), mi(1, 0)) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 129)), extractMInt( Mem256, 128, 129)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 64, 65)), extractMInt( Mem256, 64, 65)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), extractMInt( Mem256, 0, 1)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 192, 193), extractMInt( Mem256, 192, 193)), mi(1, 0)) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 129), extractMInt( Mem256, 128, 129)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 64, 65), extractMInt( Mem256, 64, 65)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( Mem256, 0, 1)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
