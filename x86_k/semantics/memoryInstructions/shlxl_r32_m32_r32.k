// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLXL-R32-M32-R32
  imports X86-CONFIGURATION

   rule <k>
    execinstr (shlx:Opcode R1:R32, M:Mem, R3:R32,  .Operands) =>  execinstr (shlxl:Opcode R1:R32, M:Mem, R3:R32,  .Operands)
  ...</k>

  context execinstr(shlxl:Opcode R1:R32, HOLE:Mem, R3:R32,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (shlxl:Opcode R1:R32, memOffset( MemOff:MInt):MemOffset, R3:R32,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (shlxl R1, memOffset( MemOff), R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (shlxl:Opcode R1:R32, memOffset( MemOff:MInt):MemOffset, R3:R32,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), shiftLeftMInt( Mem32, uvalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))
      )
    </regstate>
endmodule
