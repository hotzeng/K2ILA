// Autogenerated using stratification.
requires "x86-configuration.k"

module VDPPS-XMM-XMM-M128-IMM8
  imports X86-CONFIGURATION

  context execinstr(vdpps:Opcode Imm8:Imm, HOLE:Mem, R3:Xmm, R4:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vdpps:Opcode Imm8:Imm, memOffset( MemOff:MInt):MemOffset, R3:Xmm, R4:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vdpps Imm8, memOffset( MemOff), R3:Xmm, R4:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vdpps:Opcode Imm8:Imm, memOffset( MemOff:MInt):MemOffset, R3:Xmm, R4:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( Mem128, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( Mem128, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( Mem128, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( Mem128, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( Mem128, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( Mem128, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( Mem128, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( Mem128, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( Mem128, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( Mem128, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( Mem128, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( Mem128, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( Mem128, 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( Mem128, 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( Mem128, 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( Mem128, 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)))
      )
    </regstate>
endmodule
