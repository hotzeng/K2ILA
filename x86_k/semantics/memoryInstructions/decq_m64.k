// Autogenerated using stratification.
requires "x86-configuration.k"

module DECQ-M64
  imports X86-CONFIGURATION

  context execinstr(decq:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (decq:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (decq memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (decq:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              subMInt( Mem64, mi(64, 1)),
              MemOff,
              64
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( Mem64, mi(64, 1)), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( Mem64, 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( Mem64, mi(64, 1)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( Mem64, mi(64, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( Mem64, 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( Mem64, 1, 64), mi(63, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
