// Autogenerated using stratification.
requires "x86-configuration.k"

module VPACKUSDW-YMM-YMM-M256
  imports X86-CONFIGURATION

  context execinstr(vpackusdw:Opcode HOLE:Mem, R2:Ymm, R3:Ymm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpackusdw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm, R3:Ymm,  .Operands) =>
      loadFromMemory( MemOff, 256) ~>
      execinstr (vpackusdw memOffset( MemOff), R2:Ymm, R3:Ymm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem256:MInt):MemLoadValue ~> execinstr (vpackusdw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm, R3:Ymm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 0, 32), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 0, 32), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 32, 64), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 32, 64), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 64, 96), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 64, 96), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 96, 128), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 96, 128), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem256, 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem256, 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem256, 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi))))))))))))))))
      )
    </regstate>
endmodule
