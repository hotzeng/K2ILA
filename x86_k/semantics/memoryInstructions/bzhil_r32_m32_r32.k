// Autogenerated using stratification.
requires "x86-configuration.k"

module BZHIL-R32-M32-R32
  imports X86-CONFIGURATION

  context execinstr(bzhil:Opcode R1:R32, HOLE:Mem, R3:R32,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (bzhil:Opcode R1:R32, memOffset( MemOff:MInt):MemOffset, R3:R32,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (bzhil R1, memOffset( MemOff), R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (bzhil:Opcode R1:R32, memOffset( MemOff:MInt):MemOffset, R3:R32,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( Mem32, 1, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( Mem32, 2, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( Mem32, 3, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( Mem32, 4, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( Mem32, 5, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( Mem32, 6, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( Mem32, 7, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( Mem32, 8, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( Mem32, 9, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( Mem32, 10, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( Mem32, 11, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( Mem32, 12, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( Mem32, 13, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( Mem32, 14, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( Mem32, 15, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( Mem32, 16, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( Mem32, 17, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( Mem32, 18, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( Mem32, 19, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( Mem32, 20, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( Mem32, 21, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( Mem32, 22, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( Mem32, 23, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( Mem32, 24, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( Mem32, 25, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( Mem32, 26, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( Mem32, 27, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( Mem32, 28, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( Mem32, 29, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( Mem32, 30, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( Mem32, 31, 32)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else Mem32 #fi))

"CF" |-> (#ifMInt ugeMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( Mem32, 1, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( Mem32, 2, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( Mem32, 3, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( Mem32, 4, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( Mem32, 5, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( Mem32, 6, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( Mem32, 7, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( Mem32, 8, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( Mem32, 9, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( Mem32, 10, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( Mem32, 11, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( Mem32, 12, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( Mem32, 13, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( Mem32, 14, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( Mem32, 15, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( Mem32, 16, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( Mem32, 17, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( Mem32, 18, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( Mem32, 19, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( Mem32, 20, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( Mem32, 21, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( Mem32, 22, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( Mem32, 23, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( Mem32, 24, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( Mem32, 25, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( Mem32, 26, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( Mem32, 27, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( Mem32, 28, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( Mem32, 29, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( Mem32, 30, 32)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( Mem32, 31, 32)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else Mem32 #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then mi(1, 0) #else extractMInt( Mem32, 0, 1) #fi)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
