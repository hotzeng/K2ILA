// Autogenerated using stratification.
requires "x86-configuration.k"

module POPCNTL-R32-M32
  imports X86-CONFIGURATION

  context execinstr(popcntl:Opcode HOLE:Mem, R2:R32,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (popcntl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (popcntl memOffset( MemOff), R2,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (popcntl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 0, 1)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 1, 2)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 2, 3)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 3, 4)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 4, 5)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 5, 6)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 6, 7)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 7, 8)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 8, 9)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 9, 10)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 10, 11)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 11, 12)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 12, 13)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 13, 14)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 14, 15)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 15, 16)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 16, 17)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 17, 18)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 18, 19)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 19, 20)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 20, 21)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 21, 22)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 22, 23)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 23, 24)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 24, 25)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 25, 26)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 26, 27)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 27, 28)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 28, 29)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 29, 30)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( Mem32, 30, 31)), concatenateMInt( mi(1, 0), extractMInt( Mem32, 31, 32))))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( Mem32, mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
