// Autogenerated using stratification.
requires "x86-configuration.k"

module VPABSW-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(vpabsw:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpabsw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vpabsw memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vpabsw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 0, 16), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 0, 16))) #else extractMInt( Mem128, 0, 16) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 16, 32), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 16, 32))) #else extractMInt( Mem128, 16, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 32, 48), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 32, 48))) #else extractMInt( Mem128, 32, 48) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 48, 64), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 48, 64))) #else extractMInt( Mem128, 48, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 64, 80), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 64, 80))) #else extractMInt( Mem128, 64, 80) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 80, 96), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 80, 96))) #else extractMInt( Mem128, 80, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( Mem128, 96, 112), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 96, 112))) #else extractMInt( Mem128, 96, 112) #fi), (#ifMInt ugtMInt( extractMInt( Mem128, 112, 128), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( Mem128, 112, 128))) #else extractMInt( Mem128, 112, 128) #fi)))))))))
      )
    </regstate>
endmodule
