// Autogenerated using stratification.
requires "x86-configuration.k"

module LZCNTL-R32-M32
  imports X86-CONFIGURATION

  context execinstr(lzcntl:Opcode HOLE:Mem, R2:R32,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (lzcntl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (lzcntl memOffset( MemOff), R2,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (lzcntl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( extractMInt( Mem32, 0, 1), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( Mem32, 1, 2), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( Mem32, 2, 3), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( Mem32, 3, 4), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( Mem32, 4, 5), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( Mem32, 5, 6), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( Mem32, 6, 7), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( Mem32, 7, 8), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( Mem32, 8, 9), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( Mem32, 9, 10), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( Mem32, 10, 11), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( Mem32, 11, 12), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( Mem32, 12, 13), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( Mem32, 13, 14), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( Mem32, 14, 15), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( Mem32, 15, 16), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( Mem32, 16, 17), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( Mem32, 17, 18), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( Mem32, 18, 19), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( Mem32, 19, 20), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( Mem32, 20, 21), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( Mem32, 21, 22), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( Mem32, 22, 23), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( Mem32, 23, 24), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( Mem32, 24, 25), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( Mem32, 25, 26), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( Mem32, 26, 27), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( Mem32, 27, 28), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( Mem32, 28, 29), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( Mem32, 29, 30), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( Mem32, 30, 31), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( Mem32, 31, 32), mi(1, 1)) #then mi(64, 31) #else mi(64, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( Mem32, 0, 1), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( Mem32, 1, 2), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( Mem32, 2, 3), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( Mem32, 3, 4), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( Mem32, 4, 5), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( Mem32, 5, 6), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( Mem32, 6, 7), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( Mem32, 7, 8), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( Mem32, 8, 9), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( Mem32, 9, 10), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( Mem32, 10, 11), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( Mem32, 11, 12), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( Mem32, 12, 13), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( Mem32, 13, 14), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( Mem32, 14, 15), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( Mem32, 15, 16), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( Mem32, 16, 17), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( Mem32, 17, 18), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( Mem32, 18, 19), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( Mem32, 19, 20), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( Mem32, 20, 21), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( Mem32, 21, 22), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( Mem32, 22, 23), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( Mem32, 23, 24), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( Mem32, 24, 25), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( Mem32, 25, 26), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( Mem32, 26, 27), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( Mem32, 27, 28), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( Mem32, 28, 29), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( Mem32, 29, 30), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( Mem32, 30, 31), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( Mem32, 31, 32), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( Mem32, 0, 1), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( Mem32, 1, 2), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( Mem32, 2, 3), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( Mem32, 3, 4), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( Mem32, 4, 5), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( Mem32, 5, 6), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( Mem32, 6, 7), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( Mem32, 7, 8), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( Mem32, 8, 9), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( Mem32, 9, 10), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( Mem32, 10, 11), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( Mem32, 11, 12), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( Mem32, 12, 13), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( Mem32, 13, 14), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( Mem32, 14, 15), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( Mem32, 15, 16), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( Mem32, 16, 17), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( Mem32, 17, 18), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( Mem32, 18, 19), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( Mem32, 19, 20), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( Mem32, 20, 21), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( Mem32, 21, 22), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( Mem32, 22, 23), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( Mem32, 23, 24), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( Mem32, 24, 25), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( Mem32, 25, 26), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( Mem32, 26, 27), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( Mem32, 27, 28), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( Mem32, 28, 29), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( Mem32, 29, 30), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( Mem32, 30, 31), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( Mem32, 31, 32), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
      )
    </regstate>
endmodule
