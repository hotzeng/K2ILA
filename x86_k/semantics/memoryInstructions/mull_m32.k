// Autogenerated using stratification.
requires "x86-configuration.k"

module MULL-M32
  imports X86-CONFIGURATION

  context execinstr(mull:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (mull:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (mull memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (mull:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), Mem32), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 64))

"RDX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), Mem32), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(32, 0), Mem32), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(32, 0), Mem32), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
