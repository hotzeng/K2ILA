// Autogenerated using stratification.
requires "x86-configuration.k"

module IDIVW-M16
  imports X86-CONFIGURATION

  context execinstr(idivw:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (idivw:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 16) ~>
      execinstr (idivw memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem16:MInt):MemLoadValue ~> execinstr (idivw:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), idiv_quotient_int16(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 48, 64), extractMInt( getParentValue(%rax, RSMap), 48, 64)), Mem16))

"RDX" |-> concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 0, 48), idiv_remainder_int16(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 48, 64), extractMInt( getParentValue(%rax, RSMap), 48, 64)), Mem16))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
      )
    </regstate>
endmodule
