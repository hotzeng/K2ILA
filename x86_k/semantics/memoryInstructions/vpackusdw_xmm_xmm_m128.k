// Autogenerated using stratification.
requires "x86-configuration.k"

module VPACKUSDW-XMM-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(vpackusdw:Opcode HOLE:Mem, R2:Xmm, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpackusdw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vpackusdw memOffset( MemOff), R2:Xmm, R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vpackusdw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 0, 32), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem128, 0, 32), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem128, 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 32, 64), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem128, 32, 64), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem128, 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 64, 96), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem128, 64, 96), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem128, 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 96, 128), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( Mem128, 96, 128), mi(32, 0)) #then mi(16, 0) #else extractMInt( Mem128, 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi)))))))))
      )
    </regstate>
endmodule
