// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPSB
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpsb M1:Mem, M2:Mem, .Operands) =>
      loadFromMemory( getRegisterValue(%rdi, RSMap), 8) ~>
      execinstr (cmpsb   .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>

  rule <k>
    memLoadValue(Mem8_1:MInt):MemLoadValue ~> execinstr (cmpsb  .Operands) => 
        loadFromMemory( getRegisterValue(%rsi, RSMap), 8) ~> execinstr (cmpsb Mem8_1,  .Operands)                    
  ...</k>
    <regstate> RSMap:Map </regstate>


  rule <k>
    memLoadValue(Mem8_2:MInt):MemLoadValue ~> execinstr (cmpsb Mem8_1:MInt, .Operands) => .
  ...</k>
  <regstate>
RSMap:Map => updateMap(RSMap,
  convToRegKeys(%rdi) |-> addMInt(getRegisterValue(%rdi, RSMap), mi( 64, 1))
  convToRegKeys(%rsi) |-> addMInt(getRegisterValue(%rsi, RSMap), mi( 64, 1))

  "CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
  "AF" |-> xorMInt( xorMInt( extractMInt(Mem8_2, 3, 4), extractMInt(Mem8_1, 3, 4)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 4, 5))
  "OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt(Mem8_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt(Mem8_1, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt(Mem8_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

  "ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
  "SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt(Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 2)
  "PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

)
    </regstate>
    requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 0))

  rule <k>
    memLoadValue(Mem8_2:MInt):MemLoadValue ~> execinstr (cmpsb Mem8_1:MInt, .Operands) => .
  ...</k>
  <regstate>
RSMap:Map => updateMap(RSMap,
  convToRegKeys(%rdi) |-> subMInt(getRegisterValue(%rdi, RSMap), mi( 64, 1))
  convToRegKeys(%rsi) |-> subMInt(getRegisterValue(%rsi, RSMap), mi( 64, 1))

  "CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
  "AF" |-> xorMInt( xorMInt( extractMInt(Mem8_2, 3, 4), extractMInt(Mem8_1, 3, 4)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 4, 5))
  "OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt(Mem8_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt(Mem8_1, 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt(Mem8_2, 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)

  "ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)
  "SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt(Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 2)
  "PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( Mem8_2)), mi(9, 1)), concatenateMInt( mi(1, 0), Mem8_1)), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

)
    </regstate>
    requires eqMInt({RSMap["DF"]}:>MInt, mi(1, 1))
endmodule
