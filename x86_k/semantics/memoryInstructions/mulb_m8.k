// Autogenerated using stratification.
requires "x86-configuration.k"

module MULB-M8
  imports X86-CONFIGURATION

  context execinstr(mulb:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (mulb:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 8) ~>
      execinstr (mulb memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem8:MInt):MemLoadValue ~> execinstr (mulb:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), mulMInt( concatenateMInt( mi(8, 0), Mem8), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(8, 0), Mem8), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 8), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(8, 0), Mem8), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 8), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
