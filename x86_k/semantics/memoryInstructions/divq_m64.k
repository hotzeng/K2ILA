// Autogenerated using stratification.
requires "x86-configuration.k"

module DIVQ-M64
  imports X86-CONFIGURATION

  context execinstr(divq:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (divq:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (divq memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (divq:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"RAX" |-> div_quotient_int64(concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), Mem64)

"RDX" |-> div_remainder_int64(concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), Mem64)

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
      )
    </regstate>
endmodule
