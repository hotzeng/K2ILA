// Autogenerated using stratification.
requires "x86-configuration.k"

module PBLENDVB-XMM-M128-XMM0
  imports X86-CONFIGURATION

  context execinstr(pblendvb:Opcode XMM0, HOLE:Mem, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (pblendvb:Opcode XMM0, memOffset( MemOff:MInt):MemOffset, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (pblendvb XMM0, memOffset( MemOff), R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (pblendvb:Opcode XMM0, memOffset( MemOff:MInt):MemOffset, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 128, 129), mi(1, 1)) #then extractMInt( Mem128, 0, 8) #else extractMInt( getParentValue(R3, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 136, 137), mi(1, 1)) #then extractMInt( Mem128, 8, 16) #else extractMInt( getParentValue(R3, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 144, 145), mi(1, 1)) #then extractMInt( Mem128, 16, 24) #else extractMInt( getParentValue(R3, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 152, 153), mi(1, 1)) #then extractMInt( Mem128, 24, 32) #else extractMInt( getParentValue(R3, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 160, 161), mi(1, 1)) #then extractMInt( Mem128, 32, 40) #else extractMInt( getParentValue(R3, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 168, 169), mi(1, 1)) #then extractMInt( Mem128, 40, 48) #else extractMInt( getParentValue(R3, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 176, 177), mi(1, 1)) #then extractMInt( Mem128, 48, 56) #else extractMInt( getParentValue(R3, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 184, 185), mi(1, 1)) #then extractMInt( Mem128, 56, 64) #else extractMInt( getParentValue(R3, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 192, 193), mi(1, 1)) #then extractMInt( Mem128, 64, 72) #else extractMInt( getParentValue(R3, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 200, 201), mi(1, 1)) #then extractMInt( Mem128, 72, 80) #else extractMInt( getParentValue(R3, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 208, 209), mi(1, 1)) #then extractMInt( Mem128, 80, 88) #else extractMInt( getParentValue(R3, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 216, 217), mi(1, 1)) #then extractMInt( Mem128, 88, 96) #else extractMInt( getParentValue(R3, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 224, 225), mi(1, 1)) #then extractMInt( Mem128, 96, 104) #else extractMInt( getParentValue(R3, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 232, 233), mi(1, 1)) #then extractMInt( Mem128, 104, 112) #else extractMInt( getParentValue(R3, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 240, 241), mi(1, 1)) #then extractMInt( Mem128, 112, 120) #else extractMInt( getParentValue(R3, RSMap), 240, 248) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 248, 249), mi(1, 1)) #then extractMInt( Mem128, 120, 128) #else extractMInt( getParentValue(R3, RSMap), 248, 256) #fi)))))))))))))))))
      )
    </regstate>
endmodule
