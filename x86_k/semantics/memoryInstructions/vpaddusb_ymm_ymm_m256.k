// Autogenerated using stratification.
requires "x86-configuration.k"

module VPADDUSB-YMM-YMM-M256
  imports X86-CONFIGURATION

  context execinstr(vpaddusb:Opcode HOLE:Mem, R2:Ymm, R3:Ymm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpaddusb:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm, R3:Ymm,  .Operands) =>
      loadFromMemory( MemOff, 256) ~>
      execinstr (vpaddusb memOffset( MemOff), R2:Ymm, R3:Ymm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem256:MInt):MemLoadValue ~> execinstr (vpaddusb:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm, R3:Ymm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 0, 8))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 0, 8))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 8, 16))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 8, 16))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 16, 24))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 16, 24))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 24, 32))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 24, 32))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 32, 40))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 32, 40))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 40, 48))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 40, 48))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 48, 56))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 48, 56))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 56, 64))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 56, 64))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 64, 72))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 64, 72))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 72, 80))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 72, 80))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 80, 88))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 80, 88))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 88, 96))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 88, 96))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 96, 104))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 96, 104))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 104, 112))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 104, 112))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 112, 120))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 112, 120))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 120, 128))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 120, 128))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 128, 136))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 128, 136))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 136, 144))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 136, 144))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 144, 152))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 144, 152))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 152, 160))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 152, 160))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 160, 168))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 160, 168))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 168, 176))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 168, 176))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 176, 184))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 176, 184))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 184, 192))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 184, 192))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 192, 200))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 192, 200))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 200, 208))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 200, 208))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 208, 216))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 208, 216))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 216, 224))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 216, 224))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 224, 232))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 224, 232))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 232, 240))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 232, 240))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 240, 248))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 240, 248))), 1, 9) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 248, 256))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( Mem256, 248, 256))), 1, 9) #fi))))))))))))))))))))))))))))))))
      )
    </regstate>
endmodule
