// Autogenerated using stratification.
requires "x86-configuration.k"

module MULXL-R32-R32-M32
  imports X86-CONFIGURATION
  rule <k>
    execinstr (mulx:Opcode M:Mem, R2:R32, R3:R32,  .Operands) => execinstr (mulxl:Opcode M:Mem, R2:R32, R3:R32,  .Operands)
  ...</k>

  context execinstr(mulxl:Opcode HOLE:Mem, R2:R32, R3:R32,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (mulxl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32, R3:R32,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (mulxl memOffset( MemOff), R2, R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (mulxl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32, R3:R32,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( MemOff, 32, 64)), concatenateMInt( mi(32, 0), Mem32)), 32, 64))

convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( MemOff, 32, 64)), concatenateMInt( mi(32, 0), Mem32)), 0, 32))
      )
    </regstate>
endmodule
