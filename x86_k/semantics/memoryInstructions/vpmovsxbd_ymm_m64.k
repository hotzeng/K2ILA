// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMOVSXBD-YMM-M64
  imports X86-CONFIGURATION

  context execinstr(vpmovsxbd:Opcode HOLE:Mem, R2:Ymm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpmovsxbd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (vpmovsxbd memOffset( MemOff), R2:Ymm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (vpmovsxbd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 0, 8))), concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 8, 16))), concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 16, 24))), concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 24, 32))), concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 32, 40))), concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 40, 48))), concatenateMInt( mi(32, svalueMInt(extractMInt( Mem64, 48, 56))), mi(32, svalueMInt(extractMInt( Mem64, 56, 64))))))))))
      )
    </regstate>
endmodule
