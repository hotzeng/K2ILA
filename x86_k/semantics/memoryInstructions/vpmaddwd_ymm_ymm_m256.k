// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMADDWD-YMM-YMM-M256
  imports X86-CONFIGURATION

  context execinstr(vpmaddwd:Opcode HOLE:Mem, R2:Ymm, R3:Ymm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpmaddwd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm, R3:Ymm,  .Operands) =>
      loadFromMemory( MemOff, 256) ~>
      execinstr (vpmaddwd memOffset( MemOff), R2:Ymm, R3:Ymm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem256:MInt):MemLoadValue ~> execinstr (vpmaddwd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Ymm, R3:Ymm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))))), addMInt( mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256)))), mulMInt( mi(32, svalueMInt(extractMInt( Mem256, 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))))))))))))
      )
    </regstate>
endmodule
