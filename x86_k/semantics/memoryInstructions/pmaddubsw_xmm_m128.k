// Autogenerated using stratification.
requires "x86-configuration.k"

module PMADDUBSW-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(pmaddubsw:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (pmaddubsw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (pmaddubsw memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (pmaddubsw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 8, 16))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 0, 8))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 8, 16))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 0, 8))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 8, 16))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 0, 8))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 24, 32))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 16, 24))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 24, 32))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 16, 24))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 24, 32))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 16, 24))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 40, 48))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 32, 40))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 40, 48))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 32, 40))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 40, 48))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 32, 40))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 56, 64))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 48, 56))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 56, 64))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 48, 56))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 56, 64))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 48, 56))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 72, 80))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 64, 72))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 72, 80))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 64, 72))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 72, 80))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 64, 72))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 88, 96))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 80, 88))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 88, 96))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 80, 88))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 88, 96))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 80, 88))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 104, 112))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 96, 104))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 104, 112))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 96, 104))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 104, 112))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 96, 104))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 120, 128))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 112, 120))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 120, 128))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 112, 120))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 120, 128))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( Mem128, 112, 120))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), 16, 32) #fi) #fi)))))))))
      )
    </regstate>
endmodule
