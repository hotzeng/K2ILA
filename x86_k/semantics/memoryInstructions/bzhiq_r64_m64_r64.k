// Autogenerated using stratification.
requires "x86-configuration.k"

module BZHIQ-R64-M64-R64
  imports X86-CONFIGURATION

  context execinstr(bzhiq:Opcode R1:R64, HOLE:Mem, R3:R64,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (bzhiq:Opcode R1:R64, memOffset( MemOff:MInt):MemOffset, R3:R64,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (bzhiq R1, memOffset( MemOff), R3,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (bzhiq:Opcode R1:R64, memOffset( MemOff:MInt):MemOffset, R3:R64,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 63)) #then concatenateMInt( mi(1, 0), extractMInt( Mem64, 1, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 62)) #then concatenateMInt( mi(2, 0), extractMInt( Mem64, 2, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 61)) #then concatenateMInt( mi(3, 0), extractMInt( Mem64, 3, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 60)) #then concatenateMInt( mi(4, 0), extractMInt( Mem64, 4, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 59)) #then concatenateMInt( mi(5, 0), extractMInt( Mem64, 5, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 58)) #then concatenateMInt( mi(6, 0), extractMInt( Mem64, 6, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 57)) #then concatenateMInt( mi(7, 0), extractMInt( Mem64, 7, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 56)) #then concatenateMInt( mi(8, 0), extractMInt( Mem64, 8, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 55)) #then concatenateMInt( mi(9, 0), extractMInt( Mem64, 9, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 54)) #then concatenateMInt( mi(10, 0), extractMInt( Mem64, 10, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 53)) #then concatenateMInt( mi(11, 0), extractMInt( Mem64, 11, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 52)) #then concatenateMInt( mi(12, 0), extractMInt( Mem64, 12, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 51)) #then concatenateMInt( mi(13, 0), extractMInt( Mem64, 13, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 50)) #then concatenateMInt( mi(14, 0), extractMInt( Mem64, 14, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 49)) #then concatenateMInt( mi(15, 0), extractMInt( Mem64, 15, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 48)) #then concatenateMInt( mi(16, 0), extractMInt( Mem64, 16, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 47)) #then concatenateMInt( mi(17, 0), extractMInt( Mem64, 17, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 46)) #then concatenateMInt( mi(18, 0), extractMInt( Mem64, 18, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 45)) #then concatenateMInt( mi(19, 0), extractMInt( Mem64, 19, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 44)) #then concatenateMInt( mi(20, 0), extractMInt( Mem64, 20, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 43)) #then concatenateMInt( mi(21, 0), extractMInt( Mem64, 21, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 42)) #then concatenateMInt( mi(22, 0), extractMInt( Mem64, 22, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 41)) #then concatenateMInt( mi(23, 0), extractMInt( Mem64, 23, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 40)) #then concatenateMInt( mi(24, 0), extractMInt( Mem64, 24, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 39)) #then concatenateMInt( mi(25, 0), extractMInt( Mem64, 25, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 38)) #then concatenateMInt( mi(26, 0), extractMInt( Mem64, 26, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 37)) #then concatenateMInt( mi(27, 0), extractMInt( Mem64, 27, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 36)) #then concatenateMInt( mi(28, 0), extractMInt( Mem64, 28, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 35)) #then concatenateMInt( mi(29, 0), extractMInt( Mem64, 29, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 34)) #then concatenateMInt( mi(30, 0), extractMInt( Mem64, 30, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 33)) #then concatenateMInt( mi(31, 0), extractMInt( Mem64, 31, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then concatenateMInt( mi(32, 0), extractMInt( Mem64, 32, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(33, 0), extractMInt( Mem64, 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(34, 0), extractMInt( Mem64, 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(35, 0), extractMInt( Mem64, 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(36, 0), extractMInt( Mem64, 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(37, 0), extractMInt( Mem64, 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(38, 0), extractMInt( Mem64, 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(39, 0), extractMInt( Mem64, 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(40, 0), extractMInt( Mem64, 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(41, 0), extractMInt( Mem64, 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(42, 0), extractMInt( Mem64, 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(43, 0), extractMInt( Mem64, 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(44, 0), extractMInt( Mem64, 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(45, 0), extractMInt( Mem64, 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(46, 0), extractMInt( Mem64, 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(47, 0), extractMInt( Mem64, 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(48, 0), extractMInt( Mem64, 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(49, 0), extractMInt( Mem64, 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(50, 0), extractMInt( Mem64, 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(51, 0), extractMInt( Mem64, 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(52, 0), extractMInt( Mem64, 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(53, 0), extractMInt( Mem64, 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(54, 0), extractMInt( Mem64, 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(55, 0), extractMInt( Mem64, 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(56, 0), extractMInt( Mem64, 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(57, 0), extractMInt( Mem64, 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(58, 0), extractMInt( Mem64, 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(59, 0), extractMInt( Mem64, 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(60, 0), extractMInt( Mem64, 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(61, 0), extractMInt( Mem64, 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(62, 0), extractMInt( Mem64, 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(63, 0), extractMInt( Mem64, 63, 64)) #else mi(64, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else Mem64 #fi)

"CF" |-> (#ifMInt ugeMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 63)) #then concatenateMInt( mi(1, 0), extractMInt( Mem64, 1, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 62)) #then concatenateMInt( mi(2, 0), extractMInt( Mem64, 2, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 61)) #then concatenateMInt( mi(3, 0), extractMInt( Mem64, 3, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 60)) #then concatenateMInt( mi(4, 0), extractMInt( Mem64, 4, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 59)) #then concatenateMInt( mi(5, 0), extractMInt( Mem64, 5, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 58)) #then concatenateMInt( mi(6, 0), extractMInt( Mem64, 6, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 57)) #then concatenateMInt( mi(7, 0), extractMInt( Mem64, 7, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 56)) #then concatenateMInt( mi(8, 0), extractMInt( Mem64, 8, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 55)) #then concatenateMInt( mi(9, 0), extractMInt( Mem64, 9, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 54)) #then concatenateMInt( mi(10, 0), extractMInt( Mem64, 10, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 53)) #then concatenateMInt( mi(11, 0), extractMInt( Mem64, 11, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 52)) #then concatenateMInt( mi(12, 0), extractMInt( Mem64, 12, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 51)) #then concatenateMInt( mi(13, 0), extractMInt( Mem64, 13, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 50)) #then concatenateMInt( mi(14, 0), extractMInt( Mem64, 14, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 49)) #then concatenateMInt( mi(15, 0), extractMInt( Mem64, 15, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 48)) #then concatenateMInt( mi(16, 0), extractMInt( Mem64, 16, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 47)) #then concatenateMInt( mi(17, 0), extractMInt( Mem64, 17, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 46)) #then concatenateMInt( mi(18, 0), extractMInt( Mem64, 18, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 45)) #then concatenateMInt( mi(19, 0), extractMInt( Mem64, 19, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 44)) #then concatenateMInt( mi(20, 0), extractMInt( Mem64, 20, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 43)) #then concatenateMInt( mi(21, 0), extractMInt( Mem64, 21, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 42)) #then concatenateMInt( mi(22, 0), extractMInt( Mem64, 22, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 41)) #then concatenateMInt( mi(23, 0), extractMInt( Mem64, 23, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 40)) #then concatenateMInt( mi(24, 0), extractMInt( Mem64, 24, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 39)) #then concatenateMInt( mi(25, 0), extractMInt( Mem64, 25, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 38)) #then concatenateMInt( mi(26, 0), extractMInt( Mem64, 26, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 37)) #then concatenateMInt( mi(27, 0), extractMInt( Mem64, 27, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 36)) #then concatenateMInt( mi(28, 0), extractMInt( Mem64, 28, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 35)) #then concatenateMInt( mi(29, 0), extractMInt( Mem64, 29, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 34)) #then concatenateMInt( mi(30, 0), extractMInt( Mem64, 30, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 33)) #then concatenateMInt( mi(31, 0), extractMInt( Mem64, 31, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then concatenateMInt( mi(32, 0), extractMInt( Mem64, 32, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(33, 0), extractMInt( Mem64, 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(34, 0), extractMInt( Mem64, 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(35, 0), extractMInt( Mem64, 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(36, 0), extractMInt( Mem64, 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(37, 0), extractMInt( Mem64, 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(38, 0), extractMInt( Mem64, 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(39, 0), extractMInt( Mem64, 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(40, 0), extractMInt( Mem64, 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(41, 0), extractMInt( Mem64, 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(42, 0), extractMInt( Mem64, 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(43, 0), extractMInt( Mem64, 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(44, 0), extractMInt( Mem64, 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(45, 0), extractMInt( Mem64, 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(46, 0), extractMInt( Mem64, 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(47, 0), extractMInt( Mem64, 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(48, 0), extractMInt( Mem64, 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(49, 0), extractMInt( Mem64, 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(50, 0), extractMInt( Mem64, 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(51, 0), extractMInt( Mem64, 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(52, 0), extractMInt( Mem64, 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(53, 0), extractMInt( Mem64, 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(54, 0), extractMInt( Mem64, 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(55, 0), extractMInt( Mem64, 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(56, 0), extractMInt( Mem64, 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(57, 0), extractMInt( Mem64, 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(58, 0), extractMInt( Mem64, 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(59, 0), extractMInt( Mem64, 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(60, 0), extractMInt( Mem64, 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(61, 0), extractMInt( Mem64, 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(62, 0), extractMInt( Mem64, 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(63, 0), extractMInt( Mem64, 63, 64)) #else mi(64, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else Mem64 #fi), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then mi(1, 0) #else extractMInt( Mem64, 0, 1) #fi)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
