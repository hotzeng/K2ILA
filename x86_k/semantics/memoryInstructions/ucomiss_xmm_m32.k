// Autogenerated using stratification.
requires "x86-configuration.k"

module UCOMISS-XMM-M32
  imports X86-CONFIGURATION

  context execinstr(ucomiss:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (ucomiss:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (ucomiss memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (ucomiss:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), Mem32), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), Mem32), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), Mem32), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), Mem32), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), Mem32), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
