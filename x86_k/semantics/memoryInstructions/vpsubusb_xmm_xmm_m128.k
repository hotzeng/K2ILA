// Autogenerated using stratification.
requires "x86-configuration.k"

module VPSUBUSB-XMM-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(vpsubusb:Opcode HOLE:Mem, R2:Xmm, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpsubusb:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vpsubusb memOffset( MemOff), R2:Xmm, R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vpsubusb:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 0, 8))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 0, 8))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 0, 8))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 8, 16))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 8, 16))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 8, 16))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 16, 24))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 16, 24))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 16, 24))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 24, 32))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 24, 32))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 24, 32))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 32, 40))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 32, 40))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 32, 40))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 40, 48))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 40, 48))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 40, 48))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 48, 56))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 48, 56))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 48, 56))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 56, 64))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 56, 64))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 56, 64))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 64, 72))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 64, 72))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 64, 72))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 72, 80))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 72, 80))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 72, 80))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 80, 88))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 80, 88))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 80, 88))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 88, 96))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 88, 96))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 88, 96))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 96, 104))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 96, 104))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 96, 104))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 104, 112))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 104, 112))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 104, 112))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 112, 120))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 112, 120))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 112, 120))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 120, 128))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 120, 128))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( Mem128, 120, 128))), 2, 10) #fi) #fi)))))))))))))))))
      )
    </regstate>
endmodule
