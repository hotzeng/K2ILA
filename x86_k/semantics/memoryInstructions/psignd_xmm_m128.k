// Autogenerated using stratification.
requires "x86-configuration.k"

module PSIGND-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(psignd:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (psignd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (psignd memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (psignd:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 0, 32), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( Mem128, 0, 32), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 32, 64), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( Mem128, 32, 64), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 64, 96), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( Mem128, 64, 96), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 224))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( Mem128, 96, 128), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( Mem128, 96, 128), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 256))) #fi) #fi)))))
      )
    </regstate>
endmodule
