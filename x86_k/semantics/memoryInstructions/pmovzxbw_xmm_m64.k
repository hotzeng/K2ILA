// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVZXBW-XMM-M64
  imports X86-CONFIGURATION

  context execinstr(pmovzxbw:Opcode HOLE:Mem, R2:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (pmovzxbw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (pmovzxbw memOffset( MemOff), R2:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (pmovzxbw:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 0, 8)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 8, 16)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 16, 24)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 24, 32)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 32, 40)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 40, 48)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( Mem64, 48, 56)), concatenateMInt( mi(8, 0), extractMInt( Mem64, 56, 64))))))))))
      )
    </regstate>
endmodule
