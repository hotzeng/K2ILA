// Autogenerated using stratification.
requires "x86-configuration.k"

module VPSIGNB-XMM-XMM-M128
  imports X86-CONFIGURATION

  context execinstr(vpsignb:Opcode HOLE:Mem, R2:Xmm, R3:Xmm,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (vpsignb:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (vpsignb memOffset( MemOff), R2:Xmm, R3:Xmm,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (vpsignb:Opcode memOffset( MemOff:MInt):MemOffset, R2:Xmm, R3:Xmm,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 0, 8), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( Mem128, 0, 8), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 136))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 8, 16), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( Mem128, 8, 16), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 136, 144))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 16, 24), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( Mem128, 16, 24), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 144, 152))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 24, 32), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( Mem128, 24, 32), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 152, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 32, 40), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( Mem128, 32, 40), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 168))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 40, 48), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( Mem128, 40, 48), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 168, 176))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 48, 56), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( Mem128, 48, 56), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 176, 184))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 56, 64), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( Mem128, 56, 64), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 184, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 64, 72), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( Mem128, 64, 72), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 200))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 72, 80), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( Mem128, 72, 80), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 200, 208))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 80, 88), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( Mem128, 80, 88), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 208, 216))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 88, 96), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( Mem128, 88, 96), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 216, 224))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 96, 104), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( Mem128, 96, 104), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 232))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 104, 112), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( Mem128, 104, 112), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 232, 240))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( Mem128, 112, 120), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else (#ifMInt eqMInt( extractMInt( Mem128, 112, 120), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 240, 248))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( Mem128, 120, 128), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else (#ifMInt eqMInt( extractMInt( Mem128, 120, 128), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 248, 256))) #fi) #fi)))))))))))))))))
      )
    </regstate>
endmodule
