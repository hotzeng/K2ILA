// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPXCHG8B-M64
  imports X86-CONFIGURATION

  context execinstr(cmpxchg8b:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (cmpxchg8b:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 64) ~>
      execinstr (cmpxchg8b memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem64:MInt):MemLoadValue ~> execinstr (cmpxchg8b:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              (#ifMInt eqMInt( concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), Mem64) #then concatenateMInt( extractMInt( getParentValue(%rcx, RSMap), 32, 64), extractMInt( MemOff, 32, 64)) #else Mem64 #fi),
              MemOff,
              64
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), Mem64) #then getParentValue(%rax, RSMap) #else concatenateMInt( mi(32, 0), extractMInt( Mem64, 32, 64)) #fi)

"RDX" |-> (#ifMInt eqMInt( concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), Mem64) #then getParentValue(%rdx, RSMap) #else concatenateMInt( mi(32, 0), extractMInt( Mem64, 0, 32)) #fi)

"ZF" |-> (#ifMInt eqMInt( concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), Mem64) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
