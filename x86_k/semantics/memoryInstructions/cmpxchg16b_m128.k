// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPXCHG16B-M128
  imports X86-CONFIGURATION

  context execinstr(cmpxchg16b:Opcode HOLE:Mem,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (cmpxchg16b:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      loadFromMemory( MemOff, 128) ~>
      execinstr (cmpxchg16b memOffset( MemOff),  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem128:MInt):MemLoadValue ~> execinstr (cmpxchg16b:Opcode memOffset( MemOff:MInt):MemOffset,  .Operands) =>
      
            storeToMemory(
              (#ifMInt eqMInt( concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), Mem128) #then concatenateMInt( getParentValue(%rcx, RSMap), MemOff) #else Mem128 #fi),
              MemOff,
              128
            )
          
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), Mem128) #then getParentValue(%rax, RSMap) #else extractMInt( Mem128, 64, 128) #fi)

"RDX" |-> (#ifMInt eqMInt( concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), Mem128) #then getParentValue(%rdx, RSMap) #else extractMInt( Mem128, 0, 64) #fi)

"ZF" |-> (#ifMInt eqMInt( Mem128, concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
endmodule
