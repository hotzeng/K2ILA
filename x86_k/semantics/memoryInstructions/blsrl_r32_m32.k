// Autogenerated using stratification.
requires "x86-configuration.k"

module BLSRL-R32-M32
  imports X86-CONFIGURATION

  context execinstr(blsrl:Opcode HOLE:Mem, R2:R32,  .Operands) [result(MemOffset)]
  
  rule <k>
    execinstr (blsrl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) =>
      loadFromMemory( MemOff, 32) ~>
      execinstr (blsrl memOffset( MemOff), R2,  .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
          
  rule <k>
    memLoadValue(Mem32:MInt):MemLoadValue ~> execinstr (blsrl:Opcode memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) =>
      .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( subMInt( Mem32, mi(32, 1)), Mem32))

"CF" |-> (#ifMInt eqMInt( Mem32, mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( subMInt( Mem32, mi(32, 1)), Mem32), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( subMInt( Mem32, mi(32, 1)), 0, 1), extractMInt( Mem32, 0, 1))

"OF" |-> mi(1, 0)
      )
    </regstate>
endmodule
